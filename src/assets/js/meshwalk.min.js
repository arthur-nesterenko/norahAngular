var MW={};MW.triangle={},MW.triangle.makeBoundingBox=function(t){var e=new THREE.Box3;return e.min=e.min.min(t.a),e.min=e.min.min(t.b),e.min=e.min.min(t.c),e.max=e.max.max(t.a),e.max=e.max.max(t.b),e.max=e.max.max(t.c),e},MW.triangle.makeBoundingSphere=function(t,e){var r,o,n,a,c,s,i,l=new THREE.Sphere,h=new THREE.Vector3,d=new THREE.Vector3,u=new THREE.Vector3,m=new THREE.Vector3,x=new THREE.Vector3;return d.subVectors(t.b,t.a),u.subVectors(t.c,t.a),d.dot(u)<=0?(l.center.addVectors(t.b,t.c).divideScalar(2),l.radius=h.subVectors(t.b,t.c).length()/2,l):(d.subVectors(t.a,t.b),u.subVectors(t.c,t.b),d.dot(u)<=0?(l.center.addVectors(t.a,t.c).divideScalar(2),l.radius=h.subVectors(t.a,t.c).length()/2,l):(d.subVectors(t.a,t.c),u.subVectors(t.b,t.c),d.dot(u)<=0?(l.center.addVectors(t.a,t.b).divideScalar(2),l.radius=h.subVectors(t.a,t.b).length()/2,l):(e||(e=t.normal()),d.crossVectors(h.subVectors(t.c,t.b),e),u.crossVectors(h.subVectors(t.c,t.a),e),m.addVectors(t.c,t.b).multiplyScalar(.5),x.addVectors(t.c,t.a).multiplyScalar(.5),r=d.dot(u),o=d.dot(d),a=u.dot(u),n=-h.subVectors(x,m).dot(d),c=-h.subVectors(x,m).dot(u),s=-r*r+o*a,i=(-n*a+r*c)/s,l.center=m.clone().add(d.clone().multiplyScalar(i)),l.radius=h.subVectors(l.center,t.a).length(),l)))},function(t,e){"use strict";e.collision={},e.collision.isIntersectionAABBPlane=function(e,r){var o=(new t.Vector3).addVectors(e.max,e.min).multiplyScalar(.5),n=(new t.Vector3).subVectors(e.max,o),a=n.x*Math.abs(r.normal.x)+n.y*Math.abs(r.normal.y)+n.z*Math.abs(r.normal.z),c=r.normal.dot(o)-r.constant;return Math.abs(c)<=a},e.collision.isIntersectionTriangleAABB=function(r,o,n,a){var c,s,i,l,h=(new t.Vector3).addVectors(a.max,a.min).multiplyScalar(.5),d=(new t.Vector3).subVectors(a.max,h),u=(new t.Vector3).subVectors(r,h),m=(new t.Vector3).subVectors(o,h),x=(new t.Vector3).subVectors(n,h),V=(new t.Vector3).subVectors(m,u),f=(new t.Vector3).subVectors(x,m),b=(new t.Vector3).subVectors(u,x),p=new t.Vector3(0,-V.z,V.y),y=new t.Vector3(0,-f.z,f.y),M=new t.Vector3(0,-b.z,b.y),w=new t.Vector3(V.z,0,-V.x),g=new t.Vector3(f.z,0,-f.x),z=new t.Vector3(b.z,0,-b.x),v=new t.Vector3(-V.y,V.x,0),S=new t.Vector3(-f.y,f.x,0),P=new t.Vector3(-b.y,b.x,0);if(c=u.dot(p),s=m.dot(p),i=x.dot(p),l=d.y*Math.abs(V.z)+d.z*Math.abs(V.y),Math.max(-Math.max(c,s,i),Math.min(c,s,i))>l)return!1;if(c=u.dot(y),s=m.dot(y),i=x.dot(y),l=d.y*Math.abs(f.z)+d.z*Math.abs(f.y),Math.max(-Math.max(c,s,i),Math.min(c,s,i))>l)return!1;if(c=u.dot(M),s=m.dot(M),i=x.dot(M),l=d.y*Math.abs(b.z)+d.z*Math.abs(b.y),Math.max(-Math.max(c,s,i),Math.min(c,s,i))>l)return!1;if(c=u.dot(w),s=m.dot(w),i=x.dot(w),l=d.x*Math.abs(V.z)+d.z*Math.abs(V.x),Math.max(-Math.max(c,s,i),Math.min(c,s,i))>l)return!1;if(c=u.dot(g),s=m.dot(g),i=x.dot(g),l=d.x*Math.abs(f.z)+d.z*Math.abs(f.x),Math.max(-Math.max(c,s,i),Math.min(c,s,i))>l)return!1;if(c=u.dot(z),s=m.dot(z),i=x.dot(z),l=d.x*Math.abs(b.z)+d.z*Math.abs(b.x),Math.max(-Math.max(c,s,i),Math.min(c,s,i))>l)return!1;if(c=u.dot(v),s=m.dot(v),i=x.dot(v),l=d.x*Math.abs(V.y)+d.y*Math.abs(V.x),Math.max(-Math.max(c,s,i),Math.min(c,s,i))>l)return!1;if(c=u.dot(S),s=m.dot(S),i=x.dot(S),l=d.x*Math.abs(f.y)+d.y*Math.abs(f.x),Math.max(-Math.max(c,s,i),Math.min(c,s,i))>l)return!1;if(c=u.dot(P),s=m.dot(P),i=x.dot(P),l=d.x*Math.abs(b.y)+d.y*Math.abs(b.x),Math.max(-Math.max(c,s,i),Math.min(c,s,i))>l)return!1;if(Math.max(u.x,m.x,x.x)<-d.x||Math.min(u.x,m.x,x.x)>d.x)return!1;if(Math.max(u.y,m.y,x.y)<-d.y||Math.min(u.y,m.y,x.y)>d.y)return!1;if(Math.max(u.z,m.z,x.z)<-d.z||Math.min(u.z,m.z,x.z)>d.z)return!1;var B=new t.Plane;return B.normal=(new t.Vector3).copy(f).cross(V).normalize(),B.constant=B.normal.dot(r),e.collision.isIntersectionAABBPlane(a,B)},e.collision.isIntersectionSphereSphere=function(t,e){var r=t.radius+e.radius;return t.center.distanceToSquared(e.center)<=r*r},e.collision.isIntersectionSphereAABB=function(t,e){var r=0;return t.center.x<e.min.x&&(r+=(e.min.x-t.center.x)*(e.min.x-t.center.x)),t.center.x>e.max.x&&(r+=(t.center.x-e.max.x)*(t.center.x-e.max.x)),t.center.y<e.min.y&&(r+=(e.min.y-t.center.y)*(e.min.y-t.center.y)),t.center.y>e.max.y&&(r+=(t.center.y-e.max.y)*(t.center.y-e.max.y)),t.center.z<e.min.z&&(r+=(e.min.z-t.center.z)*(e.min.z-t.center.z)),t.center.z>e.max.z&&(r+=(t.center.z-e.max.z)*(t.center.z-e.max.z)),r<=t.radius*t.radius},e.collision.isIntersectionSphereTriangle=function(e,r,o,n,a){var c,s,i,l=new t.Vector3,h=new t.Vector3,d=new t.Vector3,u=new t.Vector3;if(l.subVectors(r,e.center),h.subVectors(o,e.center),d.subVectors(n,e.center),c=e.radius*e.radius,u.crossVectors(h.clone().sub(l),d.clone().sub(l)),s=l.dot(u),i=u.dot(u),s*s>c*i)return!1;var m,x,V,f,b,p;if(m=l.dot(l),x=l.dot(h),V=l.dot(d),f=h.dot(h),b=h.dot(d),p=d.dot(d),m>c&x>m&V>m||f>c&x>f&b>f||p>c&V>p&b>p)return!1;var y,M,w,g,z,v,S=new t.Vector3,P=new t.Vector3,B=new t.Vector3,E=new t.Vector3,N=new t.Vector3,T=new t.Vector3,A=new t.Vector3,O=new t.Vector3,I=new t.Vector3;if(S.subVectors(h,l),P.subVectors(d,h),B.subVectors(l,d),y=x-m,M=b-f,w=V-p,g=S.dot(S),z=P.dot(P),v=B.dot(B),E.subVectors(l.multiplyScalar(g),S.multiplyScalar(y)),N.subVectors(h.multiplyScalar(z),P.multiplyScalar(M)),T.subVectors(d.multiplyScalar(v),B.multiplyScalar(w)),A.subVectors(d.multiplyScalar(g),E),O.subVectors(l.multiplyScalar(z),N),I.subVectors(h.multiplyScalar(v),T),E.dot(E)>c*g*g&&E.dot(A)>=0||N.dot(N)>c*z*z&&N.dot(O)>=0||T.dot(T)>c*v*v&&T.dot(I)>=0)return!1;var R=Math.sqrt(s*s/i)-e.radius-1,H=new t.Vector3,W=new t.Vector3(-a.x,-a.y,-a.z);return H.copy(e.center).add(W.multiplyScalar(R)),{distance:R,contactPoint:H}},e.collision.testSegmentTriangle=function(t,e,r,o,n){var a=o.clone().sub(r),c=n.clone().sub(r),s=t.clone().sub(e),i=a.clone().cross(c),l=s.dot(i);if(0>=l)return!1;var h=t.clone().sub(r),d=h.dot(i);if(0>d)return 0;if(d>l)return 0;var u=s.clone().cross(h),m=c.dot(u);if(0>m||m>l)return 0;var x=-1*a.clone().dot(u);if(0>x||m+x>l)return 0;var V=1/l;d*=V,m*=V,x*=V;var f=1-m-x,b=r.clone().multiplyScalar(f),p=o.clone().multiplyScalar(m),y=n.clone().multiplyScalar(x),M=b.clone().add(p).add(y);return{contactPoint:M}}}(THREE,MW),function(t,e){"use strict";e.World=function(){this.colliderPool=[],this.characterPool=[]},e.World.prototype.add=function(t){t instanceof e.Octree?this.colliderPool.push(t):t instanceof e.CharacterController&&(this.characterPool.push(t),t.world=this)},e.World.prototype.step=function(r){var o,n,a,c,s,i,l,h,d;for(i=0,h=this.characterPool.length;h>i;i++){for(o=this.characterPool[i],l=0,d=this.colliderPool.length;d>l;l++)n=this.colliderPool[l],a=new t.Sphere(o.center,o.radius+o.groundPadding),c=n.getIntersectedNodes(a,n.maxDepth),s=e.Octree.uniqTriangkesfromNodes(c);o.collisionCandidate=s,o.update(r)}}}(THREE,MW),function(t,e){"use strict";e.Octree=function(r,o,n){this.min=r,this.max=o,this.maxDepth=n,this.nodes=[];var a,c,s,i,l,h,d,u,m,x=new t.Vector3,V=new t.Vector3,f=new t.Vector3;for(s=0;s<this.maxDepth;s++)for(this.nodes.push([]),l=Math.pow(2,s),h=Math.pow(4,s),x.subVectors(this.max,this.min).divideScalar(l),a=0,c=Math.pow(8,s);c>a;a++)d=a%l,u=a/h|0,m=(a/l|0)%l,V.set(this.min.x+d*x.x,this.min.y+u*x.y,this.min.z+m*x.z),f.copy(V).add(x),i=e.Octree.getMortonNumber(d,u,m),this.nodes[s][i]=new e.OctreeNode(this,s,i,V,f)},e.Octree.prototype={constructor:e.Octree,importThreeMesh:function(r){var o,n,a,c,s,i,l,h,d,u,m,x,V,f,b=new t.Vector3,p=new t.Vector3,y=new t.Vector3,M=new t.Vector3,w=(new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3),g=new t.Vector3;if(r.updateMatrix(),i=r.geometry.uuid,s=r.geometry.clone(),s.applyMatrix(r.matrix),s.computeVertexNormals(),s instanceof t.BufferGeometry){if(void 0!==s.index){var z=s.index.array,v=s.attributes.position.array,S=(s.attributes.normal.array,s.groups);for(0===S.length&&(S=[{start:0,count:z.length,index:0}]),o=0,a=S.length;a>o;++o)for(u=S[o].start,d=S[o].count,h=S[o].materialIndex,n=u,c=u+d;c>n;n+=3)m=h+z[n],x=h+z[n+1],V=h+z[n+2],p=b.fromArray(v,3*m).clone(),y=b.fromArray(v,3*x).clone(),M=b.fromArray(v,3*V).clone(),g.subVectors(M,y),w.subVectors(p,y),f=g.cross(w).normalize().clone(),l=new e.Face(p,y,M,f,i),this.addFace(l)}}else for(s.computeFaceNormals(),o=0,a=s.faces.length;a>o;o++)l=new e.Face(s.vertices[s.faces[o].a],s.vertices[s.faces[o].b],s.vertices[s.faces[o].c],s.faces[o].normal,i),this.addFace(l)},addFace:function(t){var r,o,n,a,c,s,i=[],l=[];for(i=this.nodes[0].slice(0),r=0,n=this.maxDepth;n>r;r++){for(o=0,a=i.length;a>o;o++)c=i[o],s=e.collision.isIntersectionTriangleAABB(t.a,t.b,t.c,c),s&&(c.trianglePool.push(t),r+1!==this.maxDepth&&(l=l.concat(c.getChildNodes())));if(0===l.length)break;i=l.slice(0),l.length=0}},removeThreeMesh:function(t){this.nodes.forEach(function(e){e.forEach(function(e){var r=[];e.trianglePool.forEach(function(e){e.meshID!==t&&r.push(e)}),e.trianglePool=r})})},getIntersectedNodes:function(t,r){var o,n,a,c,s,i,l,h=[],d=[],u=[];if(i=e.collision.isIntersectionSphereAABB(t,this),!i)return[];for(h=this.nodes[0].slice(0),o=0,a=r;a>o;o++){for(n=0,c=h.length;c>n;n++)s=h[n],i=e.collision.isIntersectionSphereAABB(t,s),i&&(l=o+1===r,l?0!==s.trianglePool.length&&u.push(s):d=d.concat(s.getChildNodes()));h=d.slice(0),d.length=0}return u}},e.Octree.separate3Bit=function(t){return t=61455&(t|t<<8),t=798915&(t|t<<4),t=2396745&(t|t<<2)},e.Octree.getMortonNumber=function(t,r,o){return e.Octree.separate3Bit(t)|e.Octree.separate3Bit(r)<<1|e.Octree.separate3Bit(o)<<2},e.Octree.uniqTriangkesfromNodes=function(t){var e,r,o,n,a,c,s=[],i=!1;if(0===t.length)return[];if(1===t.length)return t[0].trianglePool.slice(0);for(e=0,n=t.length;n>e;e++)for(r=0,a=t[e].trianglePool.length;a>r;r++){for(o=0,c=s.length;c>o;o++)t[e].trianglePool[r]===s[o]&&(i=!0);i||s.push(t[e].trianglePool[r]),i=!1}return s},e.OctreeNode=function(e,r,o,n,a){this.tree=e,this.depth=r,this.mortonNumber=o,this.min=new t.Vector3(n.x,n.y,n.z),this.max=new t.Vector3(a.x,a.y,a.z),this.trianglePool=[]},e.OctreeNode.prototype={constructor:e.OctreeNode,getParentNode:function(){return 0===this.depth?null:(this.tree.nodes[this.depth][this.mortonNumber>>3],void 0)},getChildNodes:function(){if(this.tree.maxDepth===this.depth)return null;var t=this.mortonNumber<<3;return[this.tree.nodes[this.depth+1][t],this.tree.nodes[this.depth+1][t+1],this.tree.nodes[this.depth+1][t+2],this.tree.nodes[this.depth+1][t+3],this.tree.nodes[this.depth+1][t+4],this.tree.nodes[this.depth+1][t+5],this.tree.nodes[this.depth+1][t+6],this.tree.nodes[this.depth+1][t+7]]}},e.Face=function(t,e,r,o,n){this.a=t.clone(),this.b=e.clone(),this.c=r.clone(),this.normal=o.clone(),this.meshID=n},e.Face.prototype={constructor:e.Face},e.Ray=function(t,e,r){this.origin=t,this.direction=e,this.distance=r}}(THREE,MW);